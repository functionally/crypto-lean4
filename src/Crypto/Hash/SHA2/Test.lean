import Crypto.Hash.SHA2
import Crypto.Serial
import LSpec

open Crypto.Hash.SHA2
open Crypto.Serial

open Bits
open LSpec


namespace Crypto.Hash.SHA2.Test


-- https://datatracker.ietf.org/doc/html/rfc6234#section-4

def x0 : Array UInt32 := pad SHA_224 $ ByteArray.mk #[0x61, 0x62, 0x63, 0x64, 0x65]
def x1 : Array UInt32 := #[0x61626364, 0x65800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x28]

def y0 : Array UInt32 := pad SHA_224 $ ByteArray.mk #[0x61, 0x62, 0x63, 0x64, 0x65]
def y1 : Array UInt32 := #[0x61626364, 0x65800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x28]

def z0 : Array UInt64 := pad SHA_512 $ ByteArray.mk #[0x61, 0x62, 0x63, 0x64, 0x65]
def z1 : Array UInt64 := #[0x6162636465800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x28]

def w0 : Array UInt32 := Array.pop $ hashBytes SHA_224 $ ByteArray.empty
def w1 : Array UInt32 := #[0xd14a028c, 0x2a3a2bc9, 0x476102bb, 0x288234c4, 0x15a2b01f, 0x828ea62a, 0xc5b3e42f]

#lspec
  group "RFC6234 message padding"
    $ test "SHA2_224 test vector #1." (x0 = x1)
    $ test "SHA2 224 test vector #2." (y0 = y1)
    $ test "SHA2 512 test vector #1." (z0 = z1)
    $ test "SHA2 224 test vector #3." (w0 = w1)


-- https://datatracker.ietf.org/doc/html/rfc6234#section-8.5

def TEST1 := Serializable.encode "abc"
def TEST2_1 := Serializable.encode "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
def TEST2_2a := Serializable.encode "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
def TEST2_2b := Serializable.encode "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
def TEST2_2 := TEST2_2a ++ TEST2_2b
def TEST3 := Serializable.encode âˆ˜ "".intercalate $ List.replicate 1000000 "a"
def TEST4a := "01234567012345670123456701234567"
def TEST4b := "01234567012345670123456701234567"
def TEST4 := Serializable.encode $ "".intercalate $ List.replicate 10 $ TEST4a ++ TEST4b
def TEST7_1 := ByteArray.mk #[0x49, 0xb2, 0xae, 0xc2, 0x59, 0x4b, 0xbe, 0x3a, 0x3b, 0x11, 0x75, 0x42, 0xd9, 0x4a, 0xc8]
def TEST8_1 := ByteArray.mk #[0x9a, 0x7d, 0xfd, 0xf1, 0xec, 0xea, 0xd0, 0x6e, 0xd6, 0x46, 0xaa, 0x55, 0xfe, 0x75, 0x71, 0x46]
def TEST9_1 := ByteArray.mk #[
    0x65, 0xf9, 0x32, 0x99, 0x5b, 0xa4, 0xce, 0x2c, 0xb1, 0xb4, 0xa2, 0xe7, 0x1a, 0xe7, 0x02, 0x20,
    0xaa, 0xce, 0xc8, 0x96, 0x2d, 0xd4, 0x49, 0x9c, 0xbd, 0x7c, 0x88, 0x7a, 0x94, 0xea, 0xaa, 0x10,
    0x1e, 0xa5, 0xaa, 0xbc, 0x52, 0x9b, 0x4e, 0x7e, 0x43, 0x66, 0x5a, 0x5a, 0xf2, 0xcd, 0x03, 0xfe,
    0x67, 0x8e, 0xa6, 0xa5, 0x00, 0x5b, 0xba, 0x3b, 0x08, 0x22, 0x04, 0xc2, 0x8b, 0x91, 0x09, 0xf4,
    0x69, 0xda, 0xc9, 0x2a, 0xaa, 0xb3, 0xaa, 0x7c, 0x11, 0xa1, 0xb3, 0x2a
  ]
def TEST10_1 := ByteArray.mk #[
    0xf7, 0x8f, 0x92, 0x14, 0x1b, 0xcd, 0x17, 0x0a, 0xe8, 0x9b, 0x4f, 0xba, 0x15, 0xa1, 0xd5, 0x9f,
    0x3f, 0xd8, 0x4d, 0x22, 0x3c, 0x92, 0x51, 0xbd, 0xac, 0xbb, 0xae, 0x61, 0xd0, 0x5e, 0xd1, 0x15,
    0xa0, 0x6a, 0x7c, 0xe1, 0x17, 0xb7, 0xbe, 0xea, 0xd2, 0x44, 0x21, 0xde, 0xd9, 0xc3, 0x25, 0x92,
    0xbd, 0x57, 0xed, 0xea, 0xe3, 0x9c, 0x39, 0xfa, 0x1f, 0xe8, 0x94, 0x6a, 0x84, 0xd0, 0xcf, 0x1f,
    0x7b, 0xee, 0xad, 0x17, 0x13, 0xe2, 0xe0, 0x95, 0x98, 0x97, 0x34, 0x7f, 0x67, 0xc8, 0x0b, 0x04,
    0x00, 0xc2, 0x09, 0x81, 0x5d, 0x6b, 0x10, 0xa6, 0x83, 0x83, 0x6f, 0xd5, 0x56, 0x2a, 0x56, 0xca,
    0xb1, 0xa2, 0x8e, 0x81, 0xb6, 0x57, 0x66, 0x54, 0x63, 0x1c, 0xf1, 0x65, 0x66, 0xb8, 0x6e, 0x3b,
    0x33, 0xa1, 0x08, 0xb0, 0x53, 0x07, 0xc0, 0x0a, 0xff, 0x14, 0xa7, 0x68, 0xed, 0x73, 0x50, 0x60,
    0x6a, 0x0f, 0x85, 0xe6, 0xa9, 0x1d, 0x39, 0x6f, 0x5b, 0x5c, 0xbe, 0x57, 0x7f, 0x9b, 0x38, 0x80,
    0x7c, 0x7d, 0x52, 0x3d, 0x6d, 0x79, 0x2f, 0x6e, 0xbc, 0x24, 0xa4, 0xec, 0xf2, 0xb3, 0xa4, 0x27,
    0xcd, 0xbb, 0xfb
  ]
def TEST7_224 := ByteArray.mk #[0xf0, 0x70, 0x06, 0xf2, 0x5a, 0x0b, 0xea, 0x68, 0xcd, 0x76, 0xa2, 0x95, 0x87, 0xc2, 0x8d]
def TEST8_224 := ByteArray.mk #[0x18, 0x80, 0x40, 0x05, 0xdd, 0x4f, 0xbd, 0x15, 0x56, 0x29, 0x9d, 0x6f, 0x9d, 0x93, 0xdf, 0x62]
def TEST9_224 := ByteArray.mk #[
    0xa2, 0xbe, 0x6e, 0x46, 0x32, 0x81, 0x09, 0x02, 0x94, 0xd9, 0xce, 0x94, 0x82, 0x65, 0x69, 0x42,
    0x3a, 0x3a, 0x30, 0x5e, 0xd5, 0xe2, 0x11, 0x6c, 0xd4, 0xa4, 0xc9, 0x87, 0xfc, 0x06, 0x57, 0x00,
    0x64, 0x91, 0xb1, 0x49, 0xcc, 0xd4, 0xb5, 0x11, 0x30, 0xac, 0x62, 0xb1, 0x9d, 0xc2, 0x48, 0xc7,
    0x44, 0x54, 0x3d, 0x20, 0xcd, 0x39, 0x52, 0xdc, 0xed, 0x1f, 0x06, 0xcc, 0x3b, 0x18, 0xb9, 0x1f,
    0x3f, 0x55, 0x63, 0x3e, 0xcc, 0x30, 0x85, 0xf4, 0x90, 0x70, 0x60, 0xd2
  ]
def TEST10_224 := ByteArray.mk #[
    0x55, 0xb2, 0x10, 0x07, 0x9c, 0x61, 0xb5, 0x3a, 0xdd, 0x52, 0x06, 0x22, 0xd1, 0xac, 0x97, 0xd5,
    0xcd, 0xbe, 0x8c, 0xb3, 0x3a, 0xa0, 0xae, 0x34, 0x45, 0x17, 0xbe, 0xe4, 0xd7, 0xba, 0x09, 0xab,
    0xc8, 0x53, 0x3c, 0x52, 0x50, 0x88, 0x7a, 0x43, 0xbe, 0xbb, 0xac, 0x90, 0x6c, 0x2e, 0x18, 0x37,
    0xf2, 0x6b, 0x36, 0xa5, 0x9a, 0xe3, 0xbe, 0x78, 0x14, 0xd5, 0x06, 0x89, 0x6b, 0x71, 0x8b, 0x2a,
    0x38, 0x3e, 0xcd, 0xac, 0x16, 0xb9, 0x61, 0x25, 0x55, 0x3f, 0x41, 0x6f, 0xf3, 0x2c, 0x66, 0x74,
    0xc7, 0x45, 0x99, 0xa9, 0x00, 0x53, 0x86, 0xd9, 0xce, 0x11, 0x12, 0x24, 0x5f, 0x48, 0xee, 0x47,
    0x0d, 0x39, 0x6c, 0x1e, 0xd6, 0x3b, 0x92, 0x67, 0x0c, 0xa5, 0x6e, 0xc8, 0x4d, 0xee, 0xa8, 0x14,
    0xb6, 0x13, 0x5e, 0xca, 0x54, 0x39, 0x2b, 0xde, 0xdb, 0x94, 0x89, 0xbc, 0x9b, 0x87, 0x5a, 0x8b,
    0xaf, 0x0d, 0xc1, 0xae, 0x78, 0x57, 0x36, 0x91, 0x4a, 0xb7, 0xda, 0xa2, 0x64, 0xbc, 0x07, 0x9d,
    0x26, 0x9f, 0x2c, 0x0d, 0x7e, 0xdd, 0xd8, 0x10, 0xa4, 0x26, 0x14, 0x5a, 0x07, 0x76, 0xf6, 0x7c,
    0x87, 0x82, 0x73
  ]
def TEST7_256 := ByteArray.mk #[0xbe, 0x27, 0x46, 0xc6, 0xdb, 0x52, 0x76, 0x5f, 0xdb, 0x2f, 0x88, 0x70, 0x0f, 0x9a, 0x73]
def TEST8_256 := ByteArray.mk #[0xe3, 0xd7, 0x25, 0x70, 0xdc, 0xdd, 0x78, 0x7c, 0xe3, 0x88, 0x7a, 0xb2, 0xcd, 0x68, 0x46, 0x52]
def TEST9_256 := ByteArray.mk #[
    0x3e, 0x74, 0x03, 0x71, 0xc8, 0x10, 0xc2, 0xb9, 0x9f, 0xc0, 0x4e, 0x80, 0x49, 0x07, 0xef, 0x7c,
    0xf2, 0x6b, 0xe2, 0x8b, 0x57, 0xcb, 0x58, 0xa3, 0xe2, 0xf3, 0xc0, 0x07, 0x16, 0x6e, 0x49, 0xc1,
    0x2e, 0x9b, 0xa3, 0x4c, 0x01, 0x04, 0x06, 0x91, 0x29, 0xea, 0x76, 0x15, 0x64, 0x25, 0x45, 0x70,
    0x3a, 0x2b, 0xd9, 0x01, 0xe1, 0x6e, 0xb0, 0xe0, 0x5d, 0xeb, 0xa0, 0x14, 0xeb, 0xff, 0x64, 0x06,
    0xa0, 0x7d, 0x54, 0x36, 0x4e, 0xff, 0x74, 0x2d, 0xa7, 0x79, 0xb0, 0xb3
  ]
def TEST10_256 := ByteArray.mk #[
    0x83, 0x26, 0x75, 0x4e, 0x22, 0x77, 0x37, 0x2f, 0x4f, 0xc1, 0x2b, 0x20, 0x52, 0x7a, 0xfe, 0xf0,
    0x4d, 0x8a, 0x05, 0x69, 0x71, 0xb1, 0x1a, 0xd5, 0x71, 0x23, 0xa7, 0xc1, 0x37, 0x76, 0x00, 0x00,
    0xd7, 0xbe, 0xf6, 0xf3, 0xc1, 0xf7, 0xa9, 0x08, 0x3a, 0xa3, 0x9d, 0x81, 0x0d, 0xb3, 0x10, 0x77,
    0x7d, 0xab, 0x8b, 0x1e, 0x7f, 0x02, 0xb8, 0x4a, 0x26, 0xc7, 0x73, 0x32, 0x5f, 0x8b, 0x23, 0x74,
    0xde, 0x7a, 0x4b, 0x5a, 0x58, 0xcb, 0x5c, 0x5c, 0xf3, 0x5b, 0xce, 0xe6, 0xfb, 0x94, 0x6e, 0x5b,
    0xd6, 0x94, 0xfa, 0x59, 0x3a, 0x8b, 0xeb, 0x3f, 0x9d, 0x65, 0x92, 0xec, 0xed, 0xaa, 0x66, 0xca,
    0x82, 0xa2, 0x9d, 0x0c, 0x51, 0xbc, 0xf9, 0x33, 0x62, 0x30, 0xe5, 0xd7, 0x84, 0xe4, 0xc0, 0xa4,
    0x3f, 0x8d, 0x79, 0xa3, 0x0a, 0x16, 0x5c, 0xba, 0xbe, 0x45, 0x2b, 0x77, 0x4b, 0x9c, 0x71, 0x09,
    0xa9, 0x7d, 0x13, 0x8f, 0x12, 0x92, 0x28, 0x96, 0x6f, 0x6c, 0x0a, 0xdc, 0x10, 0x6a, 0xad, 0x5a,
    0x9f, 0xdd, 0x30, 0x82, 0x57, 0x69, 0xb2, 0xc6, 0x71, 0xaf, 0x67, 0x59, 0xdf, 0x28, 0xeb, 0x39,
    0x3d, 0x54, 0xd6
  ]
def TEST7_384 := ByteArray.mk #[0x8b, 0xc5, 0x00, 0xc7, 0x7c, 0xee, 0xd9, 0x87, 0x9d, 0xa9, 0x89, 0x10, 0x7c, 0xe0, 0xaa]
def TEST8_384 := ByteArray.mk #[0xa4, 0x1c, 0x49, 0x77, 0x79, 0xc0, 0x37, 0x5f, 0xf1, 0x0a, 0x7f, 0x4e, 0x08, 0x59, 0x17, 0x39]
def TEST9_384 := ByteArray.mk #[
    0x68, 0xf5, 0x01, 0x79, 0x2d, 0xea, 0x97, 0x96, 0x76, 0x70, 0x22, 0xd9, 0x3d, 0xa7, 0x16, 0x79,
    0x30, 0x99, 0x20, 0xfa, 0x10, 0x12, 0xae, 0xa3, 0x57, 0xb2, 0xb1, 0x33, 0x1d, 0x40, 0xa1, 0xd0,
    0x3c, 0x41, 0xc2, 0x40, 0xb3, 0xc9, 0xa7, 0x5b, 0x48, 0x92, 0xf4, 0xc0, 0x72, 0x4b, 0x68, 0xc8,
    0x75, 0x32, 0x1a, 0xb8, 0xcf, 0xe5, 0x02, 0x3b, 0xd3, 0x75, 0xbc, 0x0f, 0x94, 0xbd, 0x89, 0xfe,
    0x04, 0xf2, 0x97, 0x10, 0x5d, 0x7b, 0x82, 0xff, 0xc0, 0x02, 0x1a, 0xeb, 0x1c, 0xcb, 0x67, 0x4f,
    0x52, 0x44, 0xea, 0x34, 0x97, 0xde, 0x26, 0xa4, 0x19, 0x1c, 0x5f, 0x62, 0xe5, 0xe9, 0xa2, 0xd8,
    0x08, 0x2f, 0x05, 0x51, 0xf4, 0xa5, 0x30, 0x68, 0x26, 0xe9, 0x1c, 0xc0, 0x06, 0xce, 0x1b, 0xf6,
    0x0f, 0xf7, 0x19, 0xd4, 0x2f, 0xa5, 0x21, 0xc8, 0x71, 0xcd, 0x23, 0x94, 0xd9, 0x6e, 0xf4, 0x46,
    0x8f, 0x21, 0x96, 0x6b, 0x41, 0xf2, 0xba, 0x80, 0xc2, 0x6e, 0x83, 0xa9
  ]
def TEST10_384 := ByteArray.mk #[
    0x39, 0x96, 0x69, 0xe2, 0x8f, 0x6b, 0x9c, 0x6d, 0xbc, 0xbb, 0x69, 0x12, 0xec, 0x10, 0xff, 0xcf,
    0x74, 0x79, 0x03, 0x49, 0xb7, 0xdc, 0x8f, 0xbe, 0x4a, 0x8e, 0x7b, 0x3b, 0x56, 0x21, 0xdb, 0x0f,
    0x3e, 0x7d, 0xc8, 0x7f, 0x82, 0x32, 0x64, 0xbb, 0xe4, 0x0d, 0x18, 0x11, 0xc9, 0xea, 0x20, 0x61,
    0xe1, 0xc8, 0x4a, 0xd1, 0x0a, 0x23, 0xfa, 0xc1, 0x72, 0x7e, 0x72, 0x02, 0xfc, 0x3f, 0x50, 0x42,
    0xe6, 0xbf, 0x58, 0xcb, 0xa8, 0xa2, 0x74, 0x6e, 0x1f, 0x64, 0xf9, 0xb9, 0xea, 0x35, 0x2c, 0x71,
    0x15, 0x07, 0x05, 0x3c, 0xf4, 0xe5, 0x33, 0x9d, 0x52, 0x86, 0x5f, 0x25, 0xcc, 0x22, 0xb5, 0xe8,
    0x77, 0x84, 0xa1, 0x2f, 0xc9, 0x61, 0xd6, 0x6c, 0xb6, 0xe8, 0x95, 0x73, 0x19, 0x9a, 0x2c, 0xe6,
    0x56, 0x5c, 0xbd, 0xf1, 0x3d, 0xca, 0x40, 0x38, 0x32, 0xcf, 0xcb, 0x0e, 0x8b, 0x72, 0x11, 0xe8,
    0x3a, 0xf3, 0x2a, 0x11, 0xac, 0x17, 0x92, 0x9f, 0xf1, 0xc0, 0x73, 0xa5, 0x1c, 0xc0, 0x27, 0xaa,
    0xed, 0xef, 0xf8, 0x5a, 0xad, 0x7c, 0x2b, 0x7c, 0x5a, 0x80, 0x3e, 0x24, 0x04, 0xd9, 0x6d, 0x2a,
    0x77, 0x35, 0x7b, 0xda, 0x1a, 0x6d, 0xae, 0xed, 0x17, 0x15, 0x1c, 0xb9, 0xbc, 0x51, 0x25, 0xa4,
    0x22, 0xe9, 0x41, 0xde, 0x0c, 0xa0, 0xfc, 0x50, 0x11, 0xc2, 0x3e, 0xcf, 0xfe, 0xfd, 0xd0, 0x96,
    0x76, 0x71, 0x1c, 0xf3, 0xdb, 0x0a, 0x34, 0x40, 0x72, 0x0e, 0x16, 0x15, 0xc1, 0xf2, 0x2f, 0xbc,
    0x3c, 0x72, 0x1d, 0xe5, 0x21, 0xe1, 0xb9, 0x9b, 0xa1, 0xbd, 0x55, 0x77, 0x40, 0x86, 0x42, 0x14,
    0x7e, 0xd0, 0x96
  ]
def TEST7_512 := ByteArray.mk #[0x08, 0xec, 0xb5, 0x2e, 0xba, 0xe1, 0xf7, 0x42, 0x2d, 0xb6, 0x2b, 0xcd, 0x54, 0x26, 0x70]
def TEST8_512 := ByteArray.mk #[0x8d, 0x4e, 0x3c, 0x0e, 0x38, 0x89, 0x19, 0x14, 0x91, 0x81, 0x6e, 0x9d, 0x98, 0xbf, 0xf0, 0xa0]
def TEST9_512 := ByteArray.mk #[
    0x3a, 0xdd, 0xec, 0x85, 0x59, 0x32, 0x16, 0xd1, 0x61, 0x9a, 0xa0, 0x2d, 0x97, 0x56, 0x97, 0x0b,
    0xfc, 0x70, 0xac, 0xe2, 0x74, 0x4f, 0x7c, 0x6b, 0x27, 0x88, 0x15, 0x10, 0x28, 0xf7, 0xb6, 0xa2,
    0x55, 0x0f, 0xd7, 0x4a, 0x7e, 0x6e, 0x69, 0xc2, 0xc9, 0xb4, 0x5f, 0xc4, 0x54, 0x96, 0x6d, 0xc3,
    0x1d, 0x2e, 0x10, 0xda, 0x1f, 0x95, 0xce, 0x02, 0xbe, 0xb4, 0xbf, 0x87, 0x65, 0x57, 0x4c, 0xbd,
    0x6e, 0x83, 0x37, 0xef, 0x42, 0x0a, 0xdc, 0x98, 0xc1, 0x5c, 0xb6, 0xd5, 0xe4, 0xa0, 0x24, 0x1b,
    0xa0, 0x04, 0x6d, 0x25, 0x0e, 0x51, 0x02, 0x31, 0xca, 0xc2, 0x04, 0x6c, 0x99, 0x16, 0x06, 0xab,
    0x4e, 0xe4, 0x14, 0x5b, 0xee, 0x2f, 0xf4, 0xbb, 0x12, 0x3a, 0xab, 0x49, 0x8d, 0x9d, 0x44, 0x79,
    0x4f, 0x99, 0xcc, 0xad, 0x89, 0xa9, 0xa1, 0x62, 0x12, 0x59, 0xed, 0xa7, 0x0a, 0x5b, 0x6d, 0xd4,
    0xbd, 0xd8, 0x77, 0x78, 0xc9, 0x04, 0x3b, 0x93, 0x84, 0xf5, 0x49, 0x06
  ]
def TEST10_512 := ByteArray.mk #[
    0xa5, 0x5f, 0x20, 0xc4, 0x11, 0xaa, 0xd1, 0x32, 0x80, 0x7a, 0x50, 0x2d, 0x65, 0x82, 0x4e, 0x31,
    0xa2, 0x30, 0x54, 0x32, 0xaa, 0x3d, 0x06, 0xd3, 0xe2, 0x82, 0xa8, 0xd8, 0x4e, 0x0d, 0xe1, 0xde,
    0x69, 0x74, 0xbf, 0x49, 0x54, 0x69, 0xfc, 0x7f, 0x33, 0x8f, 0x80, 0x54, 0xd5, 0x8c, 0x26, 0xc4,
    0x93, 0x60, 0xc3, 0xe8, 0x7a, 0xf5, 0x65, 0x23, 0xac, 0xf6, 0xd8, 0x9d, 0x03, 0xe5, 0x6f, 0xf2,
    0xf8, 0x68, 0x00, 0x2b, 0xc3, 0xe4, 0x31, 0xed, 0xc4, 0x4d, 0xf2, 0xf0, 0x22, 0x3d, 0x4b, 0xb3,
    0xb2, 0x43, 0x58, 0x6e, 0x1a, 0x7d, 0x92, 0x49, 0x36, 0x69, 0x4f, 0xcb, 0xba, 0xf8, 0x8d, 0x95,
    0x19, 0xe4, 0xeb, 0x50, 0xa6, 0x44, 0xf8, 0xe4, 0xf9, 0x5e, 0xb0, 0xea, 0x95, 0xbc, 0x44, 0x65,
    0xc8, 0x82, 0x1a, 0xac, 0xd2, 0xfe, 0x15, 0xab, 0x49, 0x81, 0x16, 0x4b, 0xbb, 0x6d, 0xc3, 0x2f,
    0x96, 0x90, 0x87, 0xa1, 0x45, 0xb0, 0xd9, 0xcc, 0x9c, 0x67, 0xc2, 0x2b, 0x76, 0x32, 0x99, 0x41,
    0x9c, 0xc4, 0x12, 0x8b, 0xe9, 0xa0, 0x77, 0xb3, 0xac, 0xe6, 0x34, 0x06, 0x4e, 0x6d, 0x99, 0x28,
    0x35, 0x13, 0xdc, 0x06, 0xe7, 0x51, 0x5d, 0x0d, 0x73, 0x13, 0x2e, 0x9a, 0x0d, 0xc6, 0xd3, 0xb1,
    0xf8, 0xb2, 0x46, 0xf1, 0xa9, 0x8a, 0x3f, 0xc7, 0x29, 0x41, 0xb1, 0xe3, 0xbb, 0x20, 0x98, 0xe8,
    0xbf, 0x16, 0xf2, 0x68, 0xd6, 0x4f, 0x0b, 0x0f, 0x47, 0x07, 0xfe, 0x1e, 0xa1, 0xa1, 0x79, 0x1b,
    0xa2, 0xf3, 0xc0, 0xc7, 0x58, 0xe5, 0xf5, 0x51, 0x86, 0x3a, 0x96, 0xc9, 0x49, 0xad, 0x47, 0xd7,
    0xfb, 0x40, 0xd2
  ]


def testCase (b : Bits) (message : ByteArray) (expected : String) : Bool :=
  bytesToHex (sha b message) == expected.toLower

#lspec
  group "RFC6234 test driver"
    $ (
      group "SHA2 224"
        $ test "RFC6234 test 1" (testCase SHA_224 TEST1 "23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7")
        $ test "RFC6234 test 2" (testCase SHA_224 TEST2_1 "75388B16512776CC5DBA5DA1FD890150B0C6455CB4F58B1952522525")
        $ test "RFC6234 test 4" (testCase SHA_224 TEST4 "567F69F168CD7844E65259CE658FE7AADFA25216E68ECA0EB7AB8262")
        $ test "RFC6234 test 8" (testCase SHA_224 TEST8_224 "DF90D78AA78821C99B40BA4C966921ACCD8FFB1E98AC388E56191DB1")
        $ test "RFC6234 test 10" (testCase SHA_224 TEST10_224 "0B31894EC8937AD9B91BDFBCBA294D9ADEFAA18E09305E9F20D5C3A4")
    ) ++ (
      group "SHA2 256"
        $ test "RFC6234 test 1" (testCase SHA_256 TEST1 "BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD")
        $ test "RFC6234 test 2" (testCase SHA_256 TEST2_1 "248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1")
        $ test "RFC6234 test 4" (testCase SHA_256 TEST4 "594847328451BDFA85056225462CC1D867D877FB388DF0CE35F25AB5562BFBB5")
        $ test "RFC6234 test 8" (testCase SHA_256 TEST8_256 "175EE69B02BA9B58E2B0A5FD13819CEA573F3940A94F825128CF4209BEABB4E8")
        $ test "RFC6234 test 10" (testCase SHA_256 TEST10_256 "97DBCA7DF46D62C8A422C941DD7E835B8AD3361763F7E9B2D95F4F0DA6E1CCBC")
    ) ++ (
      group "SHA2 384"
        $ test "RFC6234 test 1" (testCase SHA_384 TEST1 "CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7")
        $ test "RFC6234 test 2" (testCase SHA_384 TEST2_2 "09330C33F71147E83D192FC782CD1B4753111B173B3B05D22FA08086E3B0F712FCC7C71A557E2DB966C3E9FA91746039")
        $ test "RFC6234 test 4" (testCase SHA_384 TEST4 "2FC64A4F500DDB6828F6A3430B8DD72A368EB7F3A8322A70BC84275B9C0B3AB00D27A5CC3C2D224AA6B61A0D79FB4596")
        $ test "RFC6234 test 8" (testCase SHA_384 TEST8_384 "C9A68443A005812256B8EC76B00516F0DBB74FAB26D665913F194B6FFB0E91EA9967566B58109CBC675CC208E4C823F7")
        $ test "RFC6234 test 10" (testCase SHA_384 TEST10_384 "4F440DB1E6EDD2899FA335F09515AA025EE177A79F4B4AAF38E42B5C4DE660F5DE8FB2A5B2FBD2A3CBFFD20CFF1288C0")
    ) ++ (
      group "SHA2 512"
        $ test "RFC6234 test 1" (testCase SHA_512 TEST1 "DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F")
        $ test "RFC6234 test 2" (testCase SHA_512 TEST2_2 "8E959B75DAE313DA8CF4F72814FC143F8F7779C6EB9F7FA17299AEADB6889018501D289E4900F7E4331B99DEC4B5433AC7D329EEB6DD26545E96E55B874BE909")
        $ test "RFC6234 test 4" (testCase SHA_512 TEST4 "89D05BA632C699C31231DED4FFC127D5A894DAD412C0E024DB872D1ABD2BA8141A0F85072A9BE1E2AA04CF33C765CB510813A39CD5A84C4ACAA64D3F3FB7BAE9")
        $ test "RFC6234 test 8" (testCase SHA_512 TEST8_512 "CB0B67A4B8712CD73C9AABC0B199E9269B20844AFB75ACBDD1C153C9828924C3DDEDAAFE669C5FDD0BC66F630F6773988213EB1B16F517AD0DE4B2F0C95C90F8")
        $ test "RFC6234 test 10" (testCase SHA_512 TEST10_512 "C665BEFB36DA189D78822D10528CBF3B12B3EEF726039909C1A16A270D48719377966B957A878E720584779A62825C18DA26415E49A7176A894E7510FD1451F5")
    )


-- https://en.wikipedia.org/wiki/SHA-2#Test_vectors

#lspec
  group "Wikipedia SHA2 test vectors"
    $ test "SHA2 224 on empty string." (testCase SHA_224 ByteArray.empty "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f")
    $ test "SHA2 256 on empty string." (testCase SHA_256 ByteArray.empty "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
    $ test "SHA2 384 on empty string." (testCase SHA_384 ByteArray.empty "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b")
    $ test "SHA2 512 on empty string." (testCase SHA_512 ByteArray.empty "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e")
    $ test "SHA2 224 on sentence." (testCase SHA_224 (Serializable.encode "The quick brown fox jumps over the lazy dog") "730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525")
    $ test "SHA2 224 on variant sentence." (testCase SHA_224 (Serializable.encode "The quick brown fox jumps over the lazy dog.") "619cba8e8e05826e9b8c519c0a5c68f4fb653e8a3d8aa04bb2c8cd4c")


end Crypto.Hash.SHA2.Test
